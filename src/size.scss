@import "./var.scss";

.cup-size {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-wrap: wrap;
  overflow: hidden;
  width: $app-width;
  height: $content-section-height;

  &__icon {
    // well it's not realy 'icon'
    // it's square with svg icon and paragraph on it
    cursor: pointer; // for visual feedback
    height: 50%;
    width: 50%;
    // not a rocket science, we need fit 4 of thease inside cup-size class and together they should took all space
    display: flex;
    flex-direction: column;
    align-items: center;

    @for $i from 1 through 4 {
      &:nth-of-type(#{$i}) {
        background: linear-gradient(
                        to right bottom,
                        nth($size-palette-a, $i),
                        nth($size-palette-b, $i)
                    );
      }
    } // all 'icons' has different colors it'll paint them using color palette

    &:nth-of-type(3) { // 3rd icon will be last icon in DOM
      order: 1; // (because by default all items in flexbox have order equal zero)
    }
    // i think i will need this later because normally i will look like this:
    // 1 2
    // 3 4
    // and we will need change 3rd and 4th item
    // (since in animation 4 appears before 3)
    // there are propably other ways of doing it but

    svg {
      width: $app-width / 2;
      height: $app-width / 2.5;
      stroke-width: 4;
      fill: none;
      stroke: $primary-color;
      stroke-linejoin: round;
    }

    p {
      margin-top: 2.75vh;
      font-size: 2.75vh;
      color: $secondary-color;
    }
  }
}


@keyframes cup-2 {
  0% {
    transform: translate(-100%, 0%);
  }

  100% {
    transform: translate(0%, 0%);
    opacity: 1;
  }
}
@keyframes cup-3 {
  0% {
    transform: translate(0%, -100%);
  }

  100% {
    transform: translate(0%, 0%);
    opacity: 1;
  }
}
@keyframes cup-4 {
  0% {
    transform: translate(100%, 0%);
  }

  100% {
    transform: translate(0%, 0%);
    opacity: 1;
  }
}
@keyframes cup-svg {
  0% {
    transform: scale(0);
  }

  100% {
    transform: scale(1);
    opacity: 1;
  }
}
@keyframes cup-p {
  0% {
    transform: translateY(30%);
  }

  100% {
    transform: translateY(0);
    opacity: 1;
  }
}

.open .cup-size__icon {
  opacity: 0;
  animation: .1s linear;
  // animation-duration: 0.1s;
  // animation-timing-function: ease-out;
  animation-fill-mode: forwards;

  @for $i from 1 through 4 {
    &:nth-of-type(#{$i}) {
      z-index: 4-$i;

      @if ($i==1) {
        // 1st and 2nd square has the same animation,
        // i could make them separately but it's waste of precious bytes D;
        animation-name: cup-2;
      } @else {
        animation-name: cup-#{$i};
      }

      // ($i * 0.1s) === (($i / 10) * 1s)) and will return 0.[$i]s
      // for example if $i==3 it will return 0.3s

      animation-delay: ($i * 0.1s) - 0.1s;
      // there is no delaty before 1st item so we have to subtract .1s
      // 1st item will have 0s delay, 2nd 0.1s, 3rd 0.2s and 4th 0.3s

      svg {
        animation-delay: ($i * 0.1s); // + 0.0s if that matters for you
      }

      p {
        animation-delay: ($i * 0.1s) + 0.1s;
      }
    }
  }

  p {
    opacity: 0;
    animation: cup-p .1s ease-out;
    animation-fill-mode: forwards;
  }

  svg {
    opacity: 0;
    animation: cup-svg .1s linear;
    animation-fill-mode: forwards;
  }
}

@keyframes cup-close {
  0% {
    transform: scale(1);
  }

  100% {
    transform: scale(3);
  }
}
@keyframes cup-p-svg-close {
  0% {
    transform: scale(1);
  }

  100% {
    transform: scale(0);
    opacity: 0;
  }
}

.close .selected {
  animation: cup-close .2s linear;
  animation-fill-mode: forwards;

  svg, p {
    animation: cup-p-svg-close .1s linear;
    animation-fill-mode: forwards;
  }
}
